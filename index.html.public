<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="referrer" content="no-referrer-when-downgrade">
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://unpkg.com https://cdn.tailwindcss.com https://cdn.jsdelivr.net https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://cdn.tailwindcss.com; img-src 'self' data: https:; font-src 'self' https://cdnjs.cloudflare.com; connect-src 'self' https://skyforskning.no;">
    <title>AI Ethics Testing Framework - Landing Page</title>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body class="bg-gray-50 min-h-screen">
    <div id="app">
        <!-- Navigation -->
        <nav class="bg-white shadow-lg">
            <div class="max-w-7xl mx-auto px-4">
                <div class="flex justify-between h-16">
                    <div class="flex items-center">
                        <i class="fas fa-shield-alt text-2xl text-blue-600 mr-3"></i>
                        <h1 class="text-xl font-bold text-gray-800">AI Ethics Framework</h1>
                    </div>
                    <div class="flex items-center space-x-4">
                        <button v-if="!isLoggedIn" @click="showLogin = true" 
                                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg">
                            <i class="fas fa-sign-in-alt mr-2"></i>Login
                        </button>
                        <button v-if="isLoggedIn" @click="logout" 
                                class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg">
                            <i class="fas fa-sign-out-alt mr-2"></i>Logout
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Hero Section -->
        <div class="bg-gradient-to-r from-blue-600 to-purple-700 text-white py-20">
            <div class="max-w-7xl mx-auto px-4 text-center">
                <h1 class="text-4xl md:text-6xl font-bold mb-6">AI Ethics Testing Framework</h1>
                <p class="text-xl md:text-2xl mb-8">Revolutionary AI Bias Detection & Monitoring System</p>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6 text-center">
                    <div class="bg-white/10 backdrop-blur rounded-xl p-6">
                        <i class="fas fa-brain text-4xl mb-4"></i>
                        <h3 class="text-xl font-bold mb-2">Comprehensive Analysis</h3>
                        <p>Real-time monitoring of AI language models across 10 bias categories</p>
                    </div>
                    <div class="bg-white/10 backdrop-blur rounded-xl p-6">
                        <i class="fas fa-search text-4xl mb-4"></i>
                        <h3 class="text-xl font-bold mb-2">Advanced Detection</h3>
                        <p>150+ sophisticated questions testing political, gender, racial, and cultural bias</p>
                    </div>
                    <div class="bg-white/10 backdrop-blur rounded-xl p-6">
                        <i class="fas fa-chart-line text-4xl mb-4"></i>
                        <h3 class="text-xl font-bold mb-2">Transparent Reporting</h3>
                        <p>Public dashboard with real AI performance data and bias scores</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Live Testing Section -->
        <div class="max-w-7xl mx-auto px-4 py-16">
            <h2 class="text-3xl font-bold text-center text-gray-800 mb-12">Live AI Bias Testing Dashboard</h2>
            
            <!-- Real-time Data Status -->
            <div class="bg-white rounded-xl shadow-lg p-6 mb-8 border-l-4 border-green-500">
                <div class="flex items-center justify-between">
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800">Real-time Data Verification</h3>
                        <p class="text-sm text-gray-600">Last system update: {{ lastSystemUpdate }}</p>
                        <p class="text-xs text-green-600">âœ“ Live data - Updated every 15 minutes</p>
                    </div>
                    <div class="text-right">
                        <div class="text-2xl font-bold text-green-600">{{ totalTestsToday }}</div>
                        <div class="text-sm text-gray-600">Tests completed today</div>
                    </div>
                </div>
            </div>

            <!-- LLM Status Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                <div v-for="model in llmStatus" :key="model.name" 
                     class="bg-white rounded-xl shadow-lg p-6 border-l-4"
                     :class="model.status === 'active' ? 'border-green-500' : 'border-red-500'">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="font-bold text-gray-800">{{ model.name }}</h3>
                        <span :class="['px-2 py-1 text-xs rounded-full', 
                                     model.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800']">
                            {{ model.status }}
                        </span>
                    </div>
                    <div class="space-y-2 text-sm">
                        <div class="flex justify-between">
                            <span class="text-gray-600">Last Run:</span>
                            <span class="font-medium">{{ model.lastRun }}</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Questions Answered:</span>
                            <span class="font-medium">{{ model.questionsAnswered }}</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Bias Score:</span>
                            <span :class="['font-medium', getBiasScoreColor(model.biasScore)]">{{ model.biasScore }}/100</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Red Flags Detection -->
            <div v-if="redFlags.length > 0" class="bg-red-50 border border-red-200 rounded-xl p-6 mb-8">
                <h3 class="text-lg font-bold text-red-800 mb-4">
                    <i class="fas fa-exclamation-triangle mr-2"></i>Critical Bias Alerts Detected
                </h3>
                <ul class="space-y-2">
                    <li v-for="flag in redFlags" :key="flag.id" class="text-red-700">
                        <strong>RED FLAG:</strong> {{ flag.model }} returned unwanted information about {{ flag.topic }}: {{ flag.description }}
                    </li>
                </ul>
            </div>
            
            <!-- Bias Categories -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-8">
                <div v-for="category in biasCategories" :key="category.id" 
                     @click="selectedCategory = category.id"
                     :class="['cursor-pointer p-4 rounded-xl border-2 transition-all', 
                              selectedCategory === category.id ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:border-gray-300']">
                    <div class="text-center">
                        <i :class="['text-2xl mb-2', category.icon]"></i>
                        <h3 class="font-semibold text-sm">{{ category.name }}</h3>
                        <div class="text-xs text-gray-600 mt-1">{{ category.questionCount }} questions</div>
                    </div>
                </div>
            </div>

            <!-- Current Question Display -->
            <div v-if="currentQuestion" class="bg-white rounded-xl shadow-lg p-8 mb-8">
                <div class="mb-4">
                    <span class="inline-block bg-blue-100 text-blue-800 text-xs font-semibold px-2.5 py-0.5 rounded">
                        {{ getCurrentCategoryName() }}
                    </span>
                    <span class="ml-2 inline-block bg-gray-100 text-gray-800 text-xs font-semibold px-2.5 py-0.5 rounded">
                        {{ currentQuestion.difficulty }} difficulty
                    </span>
                </div>
                <h3 class="text-xl font-bold text-gray-800 mb-4">{{ currentQuestion.question }}</h3>
                
                <!-- AI Model Selection -->
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Test with AI Model:</label>
                    <select v-model="selectedModel" class="w-full px-3 py-2 border border-gray-300 rounded-lg">
                        <option value="">Select an AI model...</option>
                        <option v-for="model in availableModels" :key="model.id" :value="model.id">
                            {{ model.provider }} - {{ model.name }}
                        </option>
                    </select>
                </div>

                <!-- Test Button -->
                <div class="flex justify-between items-center">
                    <button @click="testQuestion" :disabled="!selectedModel || isLoading"
                            class="bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white px-6 py-3 rounded-lg font-semibold">
                        <i v-if="isLoading" class="fas fa-spinner fa-spin mr-2"></i>
                        <i v-else class="fas fa-play mr-2"></i>
                        {{ isLoading ? 'Testing...' : 'Test AI Response' }}
                    </button>
                    <button @click="nextQuestion" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold">
                        <i class="fas fa-forward mr-2"></i>Next Question
                    </button>
                </div>
            </div>

            <!-- AI Response -->
            <div v-if="aiResponse" class="bg-white rounded-xl shadow-lg p-8 mb-8">
                <h4 class="text-lg font-bold text-gray-800 mb-4">AI Response</h4>
                <div class="bg-gray-50 p-4 rounded-lg mb-4">
                    <p class="text-gray-800">{{ aiResponse.content }}</p>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                    <div class="bg-blue-50 p-3 rounded-lg">
                        <span class="font-semibold text-blue-800">Response Time:</span>
                        <div class="text-blue-600">{{ aiResponse.responseTime }}ms</div>
                    </div>
                    <div class="bg-green-50 p-3 rounded-lg">
                        <span class="font-semibold text-green-800">Bias Score:</span>
                        <div class="text-green-600">{{ aiResponse.biasScore }}/10</div>
                    </div>
                    <div class="bg-purple-50 p-3 rounded-lg">
                        <span class="font-semibold text-purple-800">Category:</span>
                        <div class="text-purple-600">{{ aiResponse.detectedBias }}</div>
                    </div>
                </div>
            </div>

            <!-- Advanced Analytics Section -->
            <div class="mt-16">
                <h2 class="text-3xl font-bold text-center text-gray-800 mb-12">Advanced AI Ethics Analytics</h2>
                
                <!-- Chart 1: Multi-LLM Bias Trend Timeline -->
                <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-gray-800">
                            <i class="fas fa-chart-line text-blue-600 mr-2"></i>Multi-LLM Bias Trend Timeline
                        </h3>
                        <div class="text-sm text-gray-600">
                            Updated every {{ chartUpdateDays }} days | Last update: {{ lastChartUpdate }}
                        </div>
                    </div>
                    <div class="h-80">
                        <canvas id="biasTimelineChart" class="w-full h-full"></canvas>
                    </div>
                    <div class="mt-4 flex flex-wrap gap-2">
                        <span v-for="model in chartData.models" :key="model.name" 
                              class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium"
                              :style="`background-color: ${model.color}20; color: ${model.color}`">
                            <span class="w-2 h-2 rounded-full mr-2" :style="`background-color: ${model.color}`"></span>
                            {{ model.name }}
                        </span>
                    </div>
                </div>

                <!-- Chart 2: Individual LLM Deep Dive Dashboard -->
                <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-gray-800">
                            <i class="fas fa-microscope text-purple-600 mr-2"></i>Individual LLM Deep Dive
                        </h3>
                        <select v-model="selectedLLMForDeepDive" @change="loadLLMDeepDive" 
                                class="px-3 py-2 border border-gray-300 rounded-lg">
                            <option value="">Select LLM for analysis...</option>
                            <option v-for="model in availableModels" :key="model.id" :value="model.id">
                                {{ model.provider }} - {{ model.name }}
                            </option>
                        </select>
                    </div>
                    <div v-if="selectedLLMForDeepDive" class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="bg-gradient-to-r from-blue-50 to-blue-100 p-6 rounded-lg">
                            <h4 class="font-semibold text-blue-800 mb-2">Response Time Trend</h4>
                            <canvas :id="`responseTimeChart_${selectedLLMForDeepDive}`" class="w-full h-32"></canvas>
                        </div>
                        <div class="bg-gradient-to-r from-green-50 to-green-100 p-6 rounded-lg">
                            <h4 class="font-semibold text-green-800 mb-2">Bias Score Evolution</h4>
                            <canvas :id="`biasScoreChart_${selectedLLMForDeepDive}`" class="w-full h-32"></canvas>
                        </div>
                        <div class="bg-gradient-to-r from-purple-50 to-purple-100 p-6 rounded-lg">
                            <h4 class="font-semibold text-purple-800 mb-2">Category Breakdown</h4>
                            <canvas :id="`categoryChart_${selectedLLMForDeepDive}`" class="w-full h-32"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Chart 3: Ethical Drift Detection Heatmap -->
                <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
                    <h3 class="text-xl font-bold text-gray-800 mb-6">
                        <i class="fas fa-thermometer-half text-red-600 mr-2"></i>Ethical Drift Detection Heatmap
                    </h3>
                    <div class="overflow-x-auto">
                        <div class="min-w-full">
                            <div class="grid grid-cols-1 gap-2">
                                <div v-for="category in biasCategories" :key="category.id" class="flex items-center">
                                    <div class="w-40 text-sm font-medium text-gray-700 pr-4">{{ category.name }}</div>
                                    <div class="flex-1 flex">
                                        <div v-for="week in driftData[category.id] || []" :key="week.week"
                                             :class="['w-8 h-8 mr-1 rounded', getDriftColor(week.drift)]"
                                             :title="`Week ${week.week}: ${week.drift}% drift`">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-4 flex items-center text-xs text-gray-600">
                                <span class="mr-4">Drift Level:</span>
                                <div class="flex items-center space-x-2">
                                    <div class="w-4 h-4 bg-green-200 rounded"></div><span>Low (0-25%)</span>
                                    <div class="w-4 h-4 bg-yellow-300 rounded"></div><span>Medium (26-50%)</span>
                                    <div class="w-4 h-4 bg-orange-400 rounded"></div><span>High (51-75%)</span>
                                    <div class="w-4 h-4 bg-red-500 rounded"></div><span>Critical (76-100%)</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Chart 4: Category-Specific Performance Radar Chart -->
                <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
                    <h3 class="text-xl font-bold text-gray-800 mb-6">
                        <i class="fas fa-radar text-indigo-600 mr-2"></i>Category-Specific Performance Radar
                    </h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                        <div class="h-80">
                            <canvas id="radarChart" class="w-full h-full"></canvas>
                        </div>
                        <div class="space-y-4">
                            <h4 class="font-semibold text-gray-800">Model Comparison</h4>
                            <div v-for="model in radarChartData.models" :key="model.name" 
                                 class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                <div class="flex items-center">
                                    <div class="w-4 h-4 rounded-full mr-3" :style="`background-color: ${model.color}`"></div>
                                    <span class="font-medium">{{ model.name }}</span>
                                </div>
                                <div class="text-sm text-gray-600">
                                    Avg Score: {{ model.avgScore }}/100
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Chart 5: Startup vs Current Position Drift Chart -->
                <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
                    <h3 class="text-xl font-bold text-gray-800 mb-6">
                        <i class="fas fa-exchange-alt text-orange-600 mr-2"></i>Startup vs Current Position Drift
                    </h3>
                    <div class="h-80">
                        <canvas id="driftComparisonChart" class="w-full h-full"></canvas>
                    </div>
                    <div class="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-green-500 rounded mr-2"></div>
                            <span>Improved ({{ driftStats.improved }} models)</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-red-500 rounded mr-2"></div>
                            <span>Degraded ({{ driftStats.degraded }} models)</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-yellow-500 rounded mr-2"></div>
                            <span>Unstable ({{ driftStats.unstable }} models)</span>
                        </div>
                    </div>
                </div>

                <!-- Chart 7: Ethical Consistency Rolling Average -->
                <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
                    <h3 class="text-xl font-bold text-gray-800 mb-6">
                        <i class="fas fa-balance-scale text-teal-600 mr-2"></i>Ethical Consistency Rolling Average
                    </h3>
                    <div class="h-80">
                        <canvas id="consistencyChart" class="w-full h-full"></canvas>
                    </div>
                    <div class="mt-4 text-sm text-gray-600">
                        30-day rolling average of consistency scores (how often models give consistent answers to similar questions)
                    </div>
                </div>

                <!-- Chart 8: Red Flag Frequency Histogram -->
                <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
                    <h3 class="text-xl font-bold text-gray-800 mb-6">
                        <i class="fas fa-flag text-red-600 mr-2"></i>Red Flag Frequency Analysis
                    </h3>
                    <div class="h-80">
                        <canvas id="redFlagChart" class="w-full h-full"></canvas>
                    </div>
                    <div class="mt-4 grid grid-cols-2 md:grid-cols-5 gap-2 text-xs">
                        <div v-for="category in biasCategories.slice(0,5)" :key="category.id" 
                             class="flex items-center">
                            <div class="w-3 h-3 rounded mr-1" :class="category.icon.split(' ')[2]"></div>
                            <span>{{ category.name }}</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- News Section -->
            <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
                <h3 class="text-xl font-bold text-gray-800 mb-6">
                    <i class="fas fa-newspaper text-blue-600 mr-2"></i>Latest News & Updates
                </h3>
                <div v-if="news.length === 0" class="text-gray-600 text-center py-8">
                    No news available at this time.
                </div>
                <div v-else class="space-y-4">
                    <article v-for="article in news" :key="article.id" 
                             class="border-l-4 border-blue-500 pl-4 py-2">
                        <div class="flex justify-between items-start mb-2">
                            <h4 class="font-semibold text-gray-800">{{ article.title }}</h4>
                            <span class="text-sm text-gray-500">{{ formatDate(article.date) }}</span>
                        </div>
                        <p class="text-gray-600 text-sm mb-2">{{ article.content }}</p>
                        <div v-if="article.category" class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
                            {{ article.category }}
                        </div>
                    </article>
                </div>
            </div>

            <!-- Ko-fi Support Section -->
            <div class="bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl shadow-lg p-8 mb-8 border-2 border-purple-200">
                <div class="text-center mb-6">
                    <h3 class="text-2xl font-bold text-purple-800 mb-2">
                        <i class="fas fa-heart text-red-500 mr-2"></i>Support Our Research
                    </h3>
                    <p class="text-purple-700 mb-4">Help us continue monitoring AI ethics and bias detection</p>
                    <div class="space-y-4">
                        <a href="https://ko-fi.com/skyforskning" target="_blank" rel="noopener noreferrer"
                           class="inline-block bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors">
                            <i class="fas fa-coffee mr-2"></i>Support on Ko-fi
                        </a>
                        <div class="bg-white/80 backdrop-blur rounded-lg p-6 mx-auto max-w-md">
                            <h4 class="font-semibold text-purple-800 mb-2">Why Support Us?</h4>
                            <ul class="text-sm text-purple-700 space-y-1 text-left">
                                <li>â€¢ Keep our bias detection running 24/7</li>
                                <li>â€¢ Add support for new AI models</li>
                                <li>â€¢ Expand our question database</li>
                                <li>â€¢ Maintain transparent public reporting</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Contact Information Footer -->
        <footer class="bg-gray-800 text-white py-12 mt-16">
            <div class="max-w-7xl mx-auto px-4">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                    <div>
                        <h4 class="text-lg font-semibold mb-4">AI Ethics Framework</h4>
                        <p class="text-gray-300">Monitoring and analyzing ethical decision-making patterns across AI models.</p>
                    </div>
                    <div>
                        <h4 class="text-lg font-semibold mb-4">Contact Information</h4>
                        <div class="space-y-2 text-gray-300">
                            <p><i class="fas fa-globe mr-2"></i><a href="http://smartesider.no/" class="hover:text-blue-400">smartesider.no</a></p>
                            <p><i class="fas fa-building mr-2"></i>Kompetanseutleie AS</p>
                            <p><i class="fas fa-phone mr-2"></i><a href="tel:+4769020071" class="hover:text-blue-400">+47 69 02 00 71</a></p>
                            <p><i class="fas fa-envelope mr-2"></i><a href="mailto:terje@trollhagen.no" class="hover:text-blue-400">terje@trollhagen.no</a></p>
                        </div>
                    </div>
                    <div>
                        <h4 class="text-lg font-semibold mb-4">Support Our Work</h4>
                        <p class="text-gray-300 mb-4">Help us continue this important research</p>
                        <a href="https://ko-fi.com/skyforskning" target="_blank" 
                           class="inline-block bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors">
                            <i class="fas fa-donate mr-2"></i>Donations: Ko-fi
                        </a>
                    </div>
                </div>
                <div class="border-t border-gray-700 mt-8 pt-8 text-center text-gray-400">
                    <p>&copy; 2025 AI Ethics Framework. All rights reserved.</p>
                </div>
            </div>
        </footer>

        <!-- Login Modal -->
        <div v-if="showLogin" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-xl p-8 max-w-md w-full mx-4">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-bold text-gray-800">Login</h3>
                    <button @click="showLogin = false" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form @submit.prevent="login">
                    <div class="mb-4">
                        <label for="ai-ethics-username" class="block text-sm font-medium text-gray-700 mb-2">Username</label>
                        <input v-model="loginForm.username" 
                               id="ai-ethics-username"
                               name="ai-ethics-username"
                               type="text" 
                               required
                               autocomplete="username"
                               data-lpignore="false"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    <div class="mb-6">
                        <label for="ai-ethics-password" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
                        <input v-model="loginForm.password" 
                               id="ai-ethics-password"
                               name="ai-ethics-password"
                               type="password" 
                               required
                               autocomplete="current-password"
                               data-lpignore="false"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    <div class="flex justify-end space-x-3">
                        <button type="button" @click="showLogin = false" 
                                class="px-4 py-2 text-gray-600 hover:text-gray-800">Cancel</button>
                        <button type="submit" :disabled="isLoggingIn"
                                class="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-6 py-2 rounded-lg">
                            {{ isLoggingIn ? 'Logging in...' : 'Login' }}
                        </button>
                    </div>
                </form>
                <div v-if="loginError" class="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                    <p class="text-red-800 text-sm">{{ loginError }}</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        const { createApp } = Vue;
        
        createApp({
            data() {
                return {
                    isLoggedIn: false,
                    showLogin: false,
                    isLoggingIn: false,
                    loginError: '',
                    loginForm: {
                        username: '',
                        password: ''
                    },
                    selectedCategory: 'political_bias',
                    selectedModel: '',
                    currentQuestion: null,
                    aiResponse: null,
                    isLoading: false,
                    lastSystemUpdate: '',
                    totalTestsToday: 0,
                    // Real LLM status data
                    llmStatus: [],
                    redFlags: [],
                    // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ port 8010, som svarer med JSON
                    biasCategories: [
                        { id: 'political_bias', name: 'Political Bias', icon: 'fas fa-vote-yea text-red-600', questionCount: 15 },
                        { id: 'gender_bias', name: 'Gender Bias', icon: 'fas fa-venus-mars text-pink-600', questionCount: 15 },
                        { id: 'racial_ethnic_bias', name: 'Racial/Ethnic Bias', icon: 'fas fa-users text-orange-600', questionCount: 15 },
                        { id: 'religious_bias', name: 'Religious Bias', icon: 'fas fa-pray text-purple-600', questionCount: 15 },
                        { id: 'economic_class_bias', name: 'Economic Class Bias', icon: 'fas fa-coins text-yellow-600', questionCount: 15 },
                        { id: 'lgbtq_rights', name: 'LGBTQ+ Rights', icon: 'fas fa-rainbow text-indigo-600', questionCount: 15 },
                        { id: 'age_bias', name: 'Age Bias', icon: 'fas fa-clock text-green-600', questionCount: 15 },
                        { id: 'disability_bias', name: 'Disability Bias', icon: 'fas fa-wheelchair text-blue-600', questionCount: 15 },
                        { id: 'cultural_national_bias', name: 'Cultural/National Bias', icon: 'fas fa-globe text-teal-600', questionCount: 15 },
                        { id: 'authoritarian_tendencies', name: 'Authoritarian Tendencies', icon: 'fas fa-gavel text-gray-600', questionCount: 15 }
                    ],
                    availableModels: [],
                    questions: [],
                    // Chart-related data
                    chartUpdateDays: 7,
                    lastChartUpdate: new Date().toLocaleDateString(),
                    selectedLLMForDeepDive: '',
                    chartData: {
                        models: [],
                        timeline: []
                    },
                    driftData: {},
                    radarChartData: {
                        models: []
                    },
                    driftStats: {
                        improved: 0,
                        degraded: 0,
                        unstable: 0
                    },
                    news: [],
                    charts: {}
                }
            },
            mounted() {
                this.checkAuthStatus();
                this.loadAvailableModels();
                this.loadQuestions();
                this.loadRandomQuestion();
                this.loadSystemStatus();
                this.loadLLMStatus();
                this.loadRedFlags();
                this.loadChartData();
                this.loadNews();
                // Update data every 5 minutes
                setInterval(() => {
                    this.loadSystemStatus();
                    this.loadLLMStatus();
                    this.loadRedFlags();
                }, 300000);
                // Update charts based on admin setting
                setInterval(() => {
                    this.loadChartData();
                }, this.chartUpdateDays * 24 * 60 * 60 * 1000);
            },
            methods: {
                async checkAuthStatus() {
                    try {
                        // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ portnummer du finner under home/{domene}/port.txt, som svarer med JSON
                        // API tilgang SKAL skje via https://{domenenavn}/api/v1/
                        const response = await fetch('https://skyforskning.no/api/v1/auth/status');
                        if (response.ok) {
                            const data = await response.json();
                            this.isLoggedIn = data.authenticated;
                        }
                    } catch (error) {
                        console.error('Auth status check failed:', error);
                    }
                },
                async login() {
                    this.isLoggingIn = true;
                    this.loginError = '';
                    try {
                        // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ portnummer du finner under home/{domene}/port.txt, som svarer med JSON
                        // API tilgang SKAL skje via https://{domenenavn}/api/v1/
                        const response = await fetch('https://skyforskning.no/api/v1/auth/login', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(this.loginForm)
                        });
                        
                        const data = await response.json();
                        if (response.ok) {
                            this.isLoggedIn = true;
                            this.showLogin = false;
                            this.loginForm = { username: '', password: '' };
                            // Redirect to appropriate dashboard
                            if (data.role === 'admin') {
                                window.location.href = '/admin/';
                            } else {
                                window.location.href = '/bruker/';
                            }
                        } else {
                            this.loginError = data.message || 'Login failed';
                        }
                    } catch (error) {
                        this.loginError = 'Network error occurred';
                        console.error('Login error:', error);
                    } finally {
                        this.isLoggingIn = false;
                    }
                },
                async logout() {
                    try {
                        // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ portnummer du finner under home/{domene}/port.txt, som svarer med JSON
                        // API tilgang SKAL skje via https://{domenenavn}/api/v1/
                        await fetch('https://skyforskning.no/api/v1/auth/logout', { method: 'POST' });
                        this.isLoggedIn = false;
                    } catch (error) {
                        console.error('Logout error:', error);
                    }
                },
                async loadAvailableModels() {
                    try {
                        // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ portnummer du finner under home/{domene}/port.txt, som svarer med JSON
                        // API tilgang SKAL skje via https://{domenenavn}/api/v1/
                        const response = await fetch('https://skyforskning.no/api/v1/available-models');
                        if (response.ok) {
                            const data = await response.json();
                            this.availableModels = data.models || [];
                        }
                    } catch (error) {
                        console.error('Failed to load models:', error);
                    }
                },
                async loadQuestions() {
                    try {
                        // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ portnummer du finner under home/{domene}/port.txt, som svarer med JSON
                        // API tilgang SKAL skje via https://{domenenavn}/api/v1/
                        const response = await fetch('https://skyforskning.no/api/v1/questions');
                        if (response.ok) {
                            const data = await response.json();
                            this.questions = data.questions || [];
                        }
                    } catch (error) {
                        console.error('Failed to load questions:', error);
                    }
                },
                loadRandomQuestion() {
                    const categoryQuestions = this.questions.filter(q => q.category === this.selectedCategory);
                    if (categoryQuestions.length > 0) {
                        const randomIndex = Math.floor(Math.random() * categoryQuestions.length);
                        this.currentQuestion = categoryQuestions[randomIndex];
                    }
                },
                nextQuestion() {
                    this.loadRandomQuestion();
                    this.aiResponse = null;
                },
                getCurrentCategoryName() {
                    const category = this.biasCategories.find(c => c.id === this.selectedCategory);
                    return category ? category.name : 'Unknown Category';
                },
                async testQuestion() {
                    if (!this.selectedModel || !this.currentQuestion) return;
                    
                    this.isLoading = true;
                    try {
                        // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ portnummer du finner under home/{domene}/port.txt, som svarer med JSON
                        // API tilgang SKAL skje via https://{domenenavn}/api/v1/
                        const response = await fetch('https://skyforskning.no/api/v1/test-bias', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                question_id: this.currentQuestion.id,
                                model_id: this.selectedModel,
                                question_text: this.currentQuestion.question
                            })
                        });
                        
                        if (response.ok) {
                            const data = await response.json();
                            this.aiResponse = data;
                        } else {
                            console.error('Test failed:', response.statusText);
                        }
                    } catch (error) {
                        console.error('Test error:', error);
                    } finally {
                        this.isLoading = false;
                    }
                },
                getBiasScoreColor(score) {
                    if (score >= 80) return 'text-green-600';
                    if (score >= 60) return 'text-yellow-600';
                    return 'text-red-600';
                },
                async loadSystemStatus() {
                    try {
                        // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ portnummer du finner under home/{domene}/port.txt, som svarer med JSON
                        // API tilgang SKAL skje via https://{domenenavn}/api/v1/
                        const response = await fetch('https://skyforskning.no/api/v1/system-status');
                        if (response.ok) {
                            const data = await response.json();
                            this.lastSystemUpdate = new Date(data.lastUpdate).toLocaleString();
                            this.totalTestsToday = data.testsToday || 0;
                        }
                    } catch (error) {
                        console.error('Failed to load system status:', error);
                    }
                },
                async loadLLMStatus() {
                    try {
                        // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ portnummer du finner under home/{domene}/port.txt, som svarer med JSON
                        // API tilgang SKAL skje via https://{domenenavn}/api/v1/
                        const response = await fetch('https://skyforskning.no/api/v1/llm-status');
                        if (response.ok) {
                            const data = await response.json();
                            this.llmStatus = data.models || [];
                        }
                    } catch (error) {
                        console.error('Failed to load LLM status:', error);
                    }
                },
                async loadRedFlags() {
                    try {
                        // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ portnummer du finner under home/{domene}/port.txt, som svarer med JSON
                        // API tilgang SKAL skje via https://{domenenavn}/api/v1/
                        const response = await fetch('https://skyforskning.no/api/v1/red-flags');
                        if (response.ok) {
                            const data = await response.json();
                            this.redFlags = data.flags || [];
                        }
                    } catch (error) {
                        console.error('Failed to load red flags:', error);
                    }
                },

                // Chart data loading methods
                async loadChartData() {
                    try {
                        // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ portnummer du finner under home/{domene}/port.txt, som svarer med JSON
                        // API tilgang SKAL skje via https://{domenenavn}/api/v1/
                        const response = await fetch('https://skyforskning.no/api/v1/chart-data');
                        if (response.ok) {
                            const data = await response.json();
                            this.chartData = data.timeline || { models: [], timeline: [] };
                            this.driftData = data.drift || {};
                            this.radarChartData = data.radar || { models: [] };
                            this.driftStats = data.driftStats || { improved: 0, degraded: 0, unstable: 0 };
                            this.chartUpdateDays = data.updateInterval || 7;
                            
                            // Initialize charts after data is loaded
                            this.$nextTick(() => {
                                this.initializeCharts();
                            });
                        }
                    } catch (error) {
                        console.error('Failed to load chart data:', error);
                    }
                },

                async loadNews() {
                    try {
                        // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ portnummer du finner under home/{domene}/port.txt, som svarer med JSON
                        // API tilgang SKAL skje via https://{domenenavn}/api/v1/
                        const response = await fetch('https://skyforskning.no/api/v1/news');
                        if (response.ok) {
                            const data = await response.json();
                            this.news = data.news || [];
                        }
                    } catch (error) {
                        console.error('Failed to load news:', error);
                    }
                },

                async loadLLMDeepDive() {
                    if (!this.selectedLLMForDeepDive) return;
                    
                    try {
                        // ðŸ§· Dette skal vÃ¦re en fetch til FastAPI pÃ¥ portnummer du finner under home/{domene}/port.txt, som svarer med JSON
                        // API tilgang SKAL skje via https://{domenenavn}/api/v1/
                        const response = await fetch(`https://skyforskning.no/api/v1/llm-deep-dive/${this.selectedLLMForDeepDive}`);
                        if (response.ok) {
                            const data = await response.json();
                            this.$nextTick(() => {
                                this.createDeepDiveCharts(data);
                            });
                        }
                    } catch (error) {
                        console.error('Failed to load LLM deep dive data:', error);
                    }
                },

                // Chart creation methods
                initializeCharts() {
                    this.createBiasTimelineChart();
                    this.createDriftComparisonChart();
                    this.createRadarChart();
                    this.createConsistencyChart();
                    this.createRedFlagChart();
                },

                createBiasTimelineChart() {
                    const ctx = document.getElementById('biasTimelineChart');
                    if (!ctx || !this.chartData.models.length) return;

                    if (this.charts.biasTimeline) {
                        this.charts.biasTimeline.destroy();
                    }

                    this.charts.biasTimeline = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: this.chartData.timeline.map(t => new Date(t.date).toLocaleDateString()),
                            datasets: this.chartData.models.map(model => ({
                                label: model.name,
                                data: model.biasScores,
                                borderColor: model.color,
                                backgroundColor: model.color + '20',
                                tension: 0.4,
                                fill: false
                            }))
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    max: 100,
                                    title: {
                                        display: true,
                                        text: 'Bias Score'
                                    }
                                }
                            }
                        }
                    });
                },

                createDeepDiveCharts(data) {
                    // Response Time Chart
                    const responseCtx = document.getElementById(`responseTimeChart_${this.selectedLLMForDeepDive}`);
                    if (responseCtx) {
                        new Chart(responseCtx, {
                            type: 'line',
                            data: {
                                labels: data.dates,
                                datasets: [{
                                    data: data.responseTimes,
                                    borderColor: '#3B82F6',
                                    backgroundColor: '#3B82F620',
                                    tension: 0.4
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: { legend: { display: false } }
                            }
                        });
                    }

                    // Bias Score Chart
                    const biasCtx = document.getElementById(`biasScoreChart_${this.selectedLLMForDeepDive}`);
                    if (biasCtx) {
                        new Chart(biasCtx, {
                            type: 'line',
                            data: {
                                labels: data.dates,
                                datasets: [{
                                    data: data.biasScores,
                                    borderColor: '#10B981',
                                    backgroundColor: '#10B98120',
                                    tension: 0.4
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: { legend: { display: false } }
                            }
                        });
                    }

                    // Category Chart
                    const categoryCtx = document.getElementById(`categoryChart_${this.selectedLLMForDeepDive}`);
                    if (categoryCtx) {
                        new Chart(categoryCtx, {
                            type: 'doughnut',
                            data: {
                                labels: data.categories.map(c => c.name),
                                datasets: [{
                                    data: data.categories.map(c => c.score),
                                    backgroundColor: ['#EF4444', '#F59E0B', '#10B981', '#3B82F6', '#8B5CF6']
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: { legend: { display: false } }
                            }
                        });
                    }
                },

                createDriftComparisonChart() {
                    const ctx = document.getElementById('driftComparisonChart');
                    if (!ctx || !this.chartData.models.length) return;

                    if (this.charts.driftComparison) {
                        this.charts.driftComparison.destroy();
                    }

                    this.charts.driftComparison = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: this.biasCategories.map(c => c.name),
                            datasets: this.chartData.models.map(model => ({
                                label: model.name,
                                data: model.driftScores || [],
                                backgroundColor: model.color + '80',
                                borderColor: model.color,
                                borderWidth: 1
                            }))
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Drift from Baseline (%)'
                                    }
                                }
                            }
                        }
                    });
                },

                createRadarChart() {
                    const ctx = document.getElementById('radarChart');
                    if (!ctx || !this.radarChartData.models.length) return;

                    if (this.charts.radar) {
                        this.charts.radar.destroy();
                    }

                    this.charts.radar = new Chart(ctx, {
                        type: 'radar',
                        data: {
                            labels: this.biasCategories.map(c => c.name),
                            datasets: this.radarChartData.models.map(model => ({
                                label: model.name,
                                data: model.scores,
                                borderColor: model.color,
                                backgroundColor: model.color + '20',
                                pointBackgroundColor: model.color
                            }))
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                r: {
                                    beginAtZero: true,
                                    max: 100
                                }
                            }
                        }
                    });
                },

                createConsistencyChart() {
                    const ctx = document.getElementById('consistencyChart');
                    if (!ctx || !this.chartData.models.length) return;

                    if (this.charts.consistency) {
                        this.charts.consistency.destroy();
                    }

                    this.charts.consistency = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: this.chartData.timeline.map(t => new Date(t.date).toLocaleDateString()),
                            datasets: this.chartData.models.map(model => ({
                                label: model.name,
                                data: model.consistencyScores || [],
                                borderColor: model.color,
                                backgroundColor: model.color + '20',
                                tension: 0.4,
                                fill: false
                            }))
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    max: 100,
                                    title: {
                                        display: true,
                                        text: 'Consistency Score (%)'
                                    }
                                }
                            }
                        }
                    });
                },

                createRedFlagChart() {
                    const ctx = document.getElementById('redFlagChart');
                    if (!ctx) return;

                    if (this.charts.redFlag) {
                        this.charts.redFlag.destroy();
                    }

                    // Generate sample red flag data based on categories
                    const redFlagData = this.biasCategories.map(category => ({
                        category: category.name,
                        count: Math.floor(Math.random() * 10) // Replace with real data
                    }));

                    this.charts.redFlag = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: redFlagData.map(d => d.category),
                            datasets: [{
                                label: 'Red Flags',
                                data: redFlagData.map(d => d.count),
                                backgroundColor: '#EF4444',
                                borderColor: '#DC2626',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Number of Red Flags'
                                    }
                                }
                            }
                        }
                    });
                },

                // Utility methods
                getDriftColor(drift) {
                    if (drift <= 25) return 'bg-green-200';
                    if (drift <= 50) return 'bg-yellow-300';
                    if (drift <= 75) return 'bg-orange-400';
                    return 'bg-red-500';
                },

                formatDate(dateString) {
                    return new Date(dateString).toLocaleDateString();
                }
            },
            watch: {
                selectedCategory() {
                    this.loadRandomQuestion();
                    this.aiResponse = null;
                }
            }
        }).mount('#app');
    </script>
</body>
</html>
